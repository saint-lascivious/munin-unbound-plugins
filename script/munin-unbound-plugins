#!/bin/sh
#!/usr/bin/env bash

# munin-unbound-plugins
# saint-lascivious (Hayden Pearce) 2022
# saint@sainternet.xyz

dependency_list="init-system-helpers lighttpd munin munin-node unbound wget"
munin_config_dir="${MUNIN_CONFIG_DIR:-/etc/munin}"
munin_plugin_dir="${MUNIN_PLUGIN_DIR:-/usr/share/munin/plugins}"
node_plugin_dir="${NODE_PLUGIN_DIR:-$munin_config_dir/plugins}"
plugin_config_dir="${PLUGIN_CONFIG_DIR:-$munin_config_dir/plugin-conf.d}"
plugin_list="${PLUGIN_LIST:-by_class by_flags by_opcode by_rcode by_type histogram hits memory queue}"
plugin_repo="https://raw.githubusercontent.com/saint-lascivious/munin-unbound-plugins/master"
proxy_config_dir="${PROXY_CONFIG_DIR:-/etc/lighttpd}"
proxy_repo="https://raw.githubusercontent.com/saint-lascivious/lighttpd-external-munin-proxy/master"
script_version="0.1"
service_list="lighttpd munin munin-node unbound"
unbound_config_dir=$"{UNBOUND_CONFIG_DIR:-/etc/unbound/unbound.conf.d}"
unbound_config_repo="https://raw.githubusercontent.com/saint-lascivious/unbound-config/master"

obnoxious_header() {
    echo -e "\e[31;1m                        _                  _                      _     v$script_version    "
    echo -e "\e[33;1m         _ __ _  _ _ _ (_)_ _ __ _  _ _ _ | |__  ___ _  _ _ _  __| |            "
    echo -e "\e[32;1m        | '  \\ || | ' \\| | ' \\__| || | ' \\| '_ \\/ _ \\ || | ' \\/ _\` |            "
    echo -e "\e[34;1m        |_|_|_\\_,_|_||_|_|_||_|  \\_,_|_||_|_.__/\\___/\\_,_|_||_\\__,_|            "
    echo -e "\n\e[35;1m        A set of Munin plugins for monitoring various Unbound states            \e[0m\n"
}

install_dependencies() {
    if [[ -x "$(command -v dpkg-query)" ]]; then
        if [[ -x "$(command -v apt)" ]]; then
            for dependency_id in $dependency_list; do
                package_query="$(dpkg-query -W --showformat='${Status}\n' "$dependency_id" | grep "install ok installed")"
                if [[ -z "$package_query" ]]; then
                    apt install --yes "$dependency_id"
                fi
            done
        else
            echo -e " * \e[31;1m[ERROR]\e[0m The required package 'apt' was not found"
            exit 1
        fi
    else
        echo -e " * \e[31;1m[ERROR]\e[0m The required package 'dpkg-query' was not found"
        exit 1
    fi
}

configure_unbound() {
    if [[ -x "$(command -v unbound-control)" ]]; then
        if [[ -x "$(command -v unbound-control-setup)" ]]; then
            setup_query="$(unbound-control-setup | grep "Setup success")"
            if [[ -n "$setup_query" ]]; then
                if [[ -d "$unbound_config_dir" ]]; then
                    if [[ -f "$unbound_config_dir"/remote-control.conf ]]; then
                        mv "$unbound_config_dir"/remote-control.conf "$unbound_config_dir"/remote-control.conf.bak || return
                    else
                        wget -q --show-progress "$unbound_config_repo"/configs/remote-control.conf -P "$unbound_config_dir"
                    fi
                else
                    echo -e " * \e[31;1m[ERROR]\e[0m No Unbound configuration directory found at"
                    echo "$unbound_config_dir"
                    exit 1
                fi
            else
                echo -e " * \e[31;1m[ERROR]\e[0m The execution of unbound-control-setup was not succsessful"
                exit 1
            fi
        else
            echo -e " * \e[31;1m[ERROR]\e[0m The required package 'unbound-control-setup' was not found"
            exit 1
        fi
    else
        echo -e " * \e[31;1m[ERROR]\e[0m The required package 'unbound-control' was not found"
        exit 1
    fi
}

configure_proxy() {
    if [[ -d "$proxy_config_dir" ]]; then
        if [[ -s "$proxy_config_dir/external.conf" ]]; then
            mv "$proxy_config_dir"/external.conf "$proxy_config_dir"/external.conf.bak || return
        else
            rm "$proxy_config_dir"/external.conf || return
        fi
        wget -q --show-progress "$proxy_repo"/etc/lighttpd/external.conf -P "$proxy_config_dir"
    else
        echo -e " * \e[31;1m[ERROR]\e[0m No Lighttpd configuration directory found at"
        echo "$proxy_config_dir"
        exit 1
    fi
}

configure_munin() {
    if [[ -d "$munin_config_dir" ]]; then
        if [[ -f "$munin_config_dir"/munin.conf ]]; then
            sed -i '/#html_strategy cron/html_strategy cgi/' "$munin_config_dir"/munin.conf
            sed -i '/#graph_strategy cron/graph_strategy cgi/' "$munin_config_dir"/munin.conf
        else
            echo -e " * \e[31;1m[ERROR]\e[0m No Munin configuration file found at"
            echo "$munin_config_dir/munin.conf"
            exit 1
        fi
    else
        echo -e " * \e[31;1m[ERROR]\e[0m No Munin configuration directory found at"
        echo "$munin_config_dir"
        exit 1
    fi
}

remove_existing() {
    if [[ -d "$munin_plugin_dir" ]]; then
        if [[ -f "$munin_plugin_dir"/unbound_munin_ ]]; then
            rm "$munin_plugin_dir"/unbound_munin_ || return
        fi
    fi
    if [[ -d "$node_plugin_dir" ]]; then
        for plugin_id in "$node_plugin_dir"/unbound_*; do
            rm "$node_plugin_dir"/unbound_"$plugin_id" || return
        done
    fi
}

install_plugins() {
    if [[ -d "$munin_plugin_dir" ]]; then
        if [[ -d "$node_plugin_dir" ]]; then
            wget -q --show-progress "$plugin_repo"/usr/share/munin/plugins/unbound_munin_ -P "$munin_plugin_dir" || return
            chmod +x "$munin_plugin_dir"/unbound_munin_ || return
            for plugin_id in $plugin_list; do
                ln -s "$munin_plugin_dir"/unbound_"$plugin_id" "$node_plugin_dir"/unbound_"$plugin_id" || return
            done
        else
            echo -e " * \e[31;1m[ERROR]\e[0m No Munin node plugin directory found at"
            echo "$node_plugin_dir"
            exit 1
        fi
    else
        echo -e " * \e[31;1m[ERROR]\e[0m No Munin plugin directory found at"
        echo "$munin_plugin_dir"
        exit 1
    fi
}

configure_plugins() {
    if [[ -d "$plugin_config_dir" ]]; then
        if [[ ! -f  "$plugin_config_dir/unbound" ]]; then
            wget -q --show-progress "$plugin_repo"/etc/munin/plugin-conf.d/unbound -P "$plugin_config_dir"
        fi
    else
        echo -e " * \e[31;1m[ERROR]\e[0m No Munin plugin configuration directory found at"
        echo "$plugin_config_dir"
        exit 1
    fi
}

restart_services() {
    if [[ -x "$(command -v service)" ]]; then
        for service_id in $service_list; do
            service "$service_id" restart
        done
    else
        echo -e " * \e[31;1m[ERROR]\e[0m The required command 'service' was not found"
    fi
}

help_function() {
    echo "Usage: munin-unbound-plugins [OPTION]

Where OPTION is one of

    -h              Display this help dislogue
    --help

    -i              Install and configure munin-unbound-plugins, can be used to
    --install       update an existing installation.
                    Use PLUGIN_LIST to override the default plugin list:
                    by_class, by_flags, by_opcode, by_rcode, by_type, histogram,
                    hits, memory, queue

                    Example: export PLUGIN_LIST=\"by_class by_rcode hits\"

    -u
    --uninstall     Uninstall munin-unbound-plugins

    -v              Display the munin-unbound-plugins script version
    --version
                    Current munin-unbound-plugins script version v$script_version"
}

install_function() {
    obnoxious_header
    install_dependencies
    configure_unbound
    configure_proxy
    configure_munin
    remove_existing
    install_plugins
    configure_plugins
    restart_services
}

uninstall_function() {
    obnoxious_header
    remove_existing
    if [[ -f "$unbound_config_dir/remote-control.conf.bak" ]]; then
        mv "$unbound_config_dir"/remote-control.conf.bak "$unbound_config_dir"/remote-control.conf || return
    else
        rm "$unbound_config_dir"/remote-control.conf || return
    fi
    if [[ -f "$proxy_config_dir/external.conf.bak" ]]; then
        mv "$proxy_config_dir"/external.conf.bak "$proxy_config_dir"/external.conf || return
    else
        rm "$proxy_config_dir"/external.conf
    fi
}

version_function() {
    echo "munin-unbound-plugins v$script_version"
}

if [[ ! "$EUID" -eq "0" ]];then
    if [[ -x "$(command -v sudo)" ]]; then
        exec sudo -E bash "$0" "$@"
        exit "$?"
    else
        echo -e " * \e[31;1m[ERROR]\e[0m Insufficient privileges"
        echo -e "Install sudo or run munin-unbound-plugins as root"
        exit 1
    fi
fi

case "${1}" in
    "-h" | "--help"         ) help_function ;;
    "-i" | "--install"      ) install_function ;;
    "-u" | "--uninstall"    ) uninstall_function ;;
    "-v" | "--version"      ) version_function ;;
    *                       ) help_function ;;
esac
